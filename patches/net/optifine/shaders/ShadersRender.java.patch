--- a/net/optifine/shaders/ShadersRender.java
+++ b/net/optifine/shaders/ShadersRender.java
@@ -3,6 +3,7 @@
 import com.mojang.blaze3d.matrix.MatrixStack;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.IVertexBuilder;
 import java.nio.IntBuffer;
 import java.util.Iterator;
@@ -15,6 +16,7 @@
 import net.minecraft.client.renderer.FirstPersonRenderer;
 import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.IRenderTypeBuffer;
+import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.WorldRenderer;
 import net.minecraft.client.renderer.chunk.ChunkRenderDispatcher;
@@ -28,6 +30,7 @@
 import net.minecraft.tileentity.EndPortalTileEntity;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.Direction;
+import net.minecraft.util.Hand;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
@@ -196,7 +199,7 @@
         }
     }
 
-    public static void renderShadowMap(GameRenderer entityRenderer, ActiveRenderInfo activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
+    public static void renderShadowMap(GameRenderer gameRenderer, ActiveRenderInfo activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
     {
         if (Shaders.usedShadowDepthBuffers > 0 && --Shaders.shadowPassCounter <= 0)
         {
@@ -262,6 +265,9 @@
             worldrenderer.renderBlockLayer(RenderTypes.SOLID, matrixstack, d0, d1, d2);
             Shaders.checkGLError("shadow terrain solid");
             GlStateManager.enableAlphaTest();
+            //Vivecraft - needed???
+            GlStateManager.alphaFunc(516, 0.1F);
+            //
             worldrenderer.renderBlockLayer(RenderTypes.CUTOUT_MIPPED, matrixstack, d0, d1, d2);
             Shaders.checkGLError("shadow terrain cutoutmipped");
             minecraft.getTextureManager().getTexture(AtlasTexture.LOCATION_BLOCKS_TEXTURE).setBlurMipmapDirect(false, false);
@@ -278,7 +284,13 @@
             EntityRendererManager entityrenderermanager = minecraft.getRenderManager();
             IRenderTypeBuffer.Impl irendertypebuffer$impl = worldrenderer1.getRenderTypeTextures().getBufferSource();
             boolean flag = Shaders.isShadowPass && !minecraft.player.isSpectator();
-
+            
+            //Vivecraft fix something	
+            Matrix4f light = new Matrix4f();
+            light.setIdentity();
+            RenderHelper.setupLevelDiffuseLighting(light);
+            //
+            
             for (WorldRenderer.LocalRenderInformationContainer worldrenderer$localrenderinformationcontainer : worldrenderer1.getRenderInfosEntities())
             {
                 ChunkRenderDispatcher.ChunkRender chunkrenderdispatcher$chunkrender = worldrenderer$localrenderinformationcontainer.renderChunk;
@@ -286,12 +298,24 @@
 
                 for (Entity entity : chunk.getEntityLists()[chunkrenderdispatcher$chunkrender.getPosition().getY() / 16])
                 {
-                    if ((entityrenderermanager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(minecraft.player)) && (entity != activeRenderInfo.getRenderViewEntity() || flag || activeRenderInfo.isThirdPerson() || activeRenderInfo.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfo.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfo.getRenderViewEntity() == entity))
+                	//always render self shadow. add true.
+                    if ((entityrenderermanager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(minecraft.player)) && (true || entity != activeRenderInfo.getRenderViewEntity() || flag || activeRenderInfo.isThirdPerson() || activeRenderInfo.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfo.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfo.getRenderViewEntity() == entity))
                     {
-                        worldrenderer1.renderedEntity = entity;
-                        Shaders.nextEntity(entity);
-                        worldrenderer1.renderEntity(entity, d0, d1, d2, partialTicks, matrixstack, irendertypebuffer$impl);
-                        worldrenderer1.renderedEntity = null;
+                    	//Vivecraft shadow location.
+                    	if(entity == activeRenderInfo.getRenderViewEntity()) { 
+                    		gameRenderer.restoreRVEPos((LivingEntity) entity);
+                    	}
+                    	//
+                    	worldrenderer1.renderedEntity = entity;
+                    	Shaders.nextEntity(entity);
+                    	worldrenderer1.renderEntity(entity, d0, d1, d2, partialTicks, matrixstack, irendertypebuffer$impl);
+                    	worldrenderer1.renderedEntity = null;
+                    	//Vivecraft
+                    	if(entity == activeRenderInfo.getRenderViewEntity()) {
+                    		gameRenderer.cacheRVEPos((LivingEntity) entity);
+                    		gameRenderer.setupRVE();
+                    	}
+                    	//
                     }
                 }
             }
@@ -399,7 +423,8 @@
             GlStateManager.depthMask(true);
             GlStateManager.enableCull();
             GlStateManager.disableBlend();
-            GL30.glFlush();
+            // VIVECRAFT: yeah still no 3.0
+            //GL30.glFlush();
             Shaders.checkGLError("shadow flush");
             Shaders.isShadowPass = false;
             minecraft.getProfiler().endStartSection("shadow postprocess");
