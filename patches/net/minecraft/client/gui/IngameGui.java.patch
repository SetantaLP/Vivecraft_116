--- a/net/minecraft/client/gui/IngameGui.java
+++ b/net/minecraft/client/gui/IngameGui.java
@@ -6,8 +6,11 @@
 import com.google.common.collect.Ordering;
 import com.mojang.blaze3d.matrix.MatrixStack;
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.GlStateManager.DestFactor;
+import com.mojang.blaze3d.platform.GlStateManager.SourceFactor;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.datafixers.util.Pair;
+
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -16,6 +19,9 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL11;
+
 import net.minecraft.block.Blocks;
 import net.minecraft.client.GameSettings;
 import net.minecraft.client.Minecraft;
@@ -27,11 +33,13 @@
 import net.minecraft.client.gui.overlay.DebugOverlayGui;
 import net.minecraft.client.gui.overlay.PlayerTabOverlayGui;
 import net.minecraft.client.gui.overlay.SubtitleOverlayGui;
+import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.inventory.ContainerScreen;
 import net.minecraft.client.renderer.ActiveRenderInfo;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.ItemRenderer;
 import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.renderer.WorldVertexBufferUploader;
 import net.minecraft.client.renderer.texture.AtlasTexture;
 import net.minecraft.client.renderer.texture.PotionSpriteUploader;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
@@ -43,6 +51,7 @@
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.inventory.container.INamedContainerProvider;
 import net.minecraft.item.ItemStack;
+import net.minecraft.item.Items;
 import net.minecraft.potion.Effect;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
@@ -66,6 +75,7 @@
 import net.minecraft.util.text.IFormattableTextComponent;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.StringTextComponent;
+import net.minecraft.util.text.TextComponent;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraft.util.text.TextProcessing;
 import net.minecraft.util.text.TranslationTextComponent;
@@ -134,6 +144,8 @@
     private int scaledWidth;
     private int scaledHeight;
     private final Map<ChatType, List<IChatListener>> chatListeners = Maps.newHashMap();
+    // Vivecraft
+    public boolean showPlayerList;
 
     public IngameGui(Minecraft mcIn)
     {
@@ -170,6 +182,7 @@
         this.titleFadeOut = 20;
     }
 
+    //This method is not called at all when running Forge.
     public void renderIngameGui(MatrixStack matrixStack, float partialTicks)
     {
         this.scaledWidth = this.mc.getMainWindow().getScaledWidth();
@@ -177,29 +190,31 @@
         FontRenderer fontrenderer = this.getFontRenderer();
         RenderSystem.enableBlend();
 
-        if (Config.isVignetteEnabled())
+        //Vivecraft no no
+        if (false && Config.isVignetteEnabled())
         {
             this.renderVignette(this.mc.getRenderViewEntity());
         }
         else
         {
             RenderSystem.enableDepthTest();
-            RenderSystem.defaultBlendFunc();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
         }
 
-        ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
+//		  Vivecraft none of this.
+//        ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
 
-        if (this.mc.gameSettings.getPointOfView().func_243192_a() && itemstack.getItem() == Blocks.CARVED_PUMPKIN.asItem())
-        {
-            this.renderPumpkinOverlay();
-        }
-
-        float f = MathHelper.lerp(partialTicks, this.mc.player.prevTimeInPortal, this.mc.player.timeInPortal);
-
-        if (f > 0.0F && !this.mc.player.isPotionActive(Effects.NAUSEA))
-        {
-            this.renderPortal(f);
-        }
+//        if (this.mc.gameSettings.func_243230_g().func_243192_a() && itemstack.getItem() == Blocks.CARVED_PUMPKIN.asItem())
+//        {
+//            this.renderPumpkinOverlay();
+//        }
+//
+//        float f = MathHelper.lerp(partialTicks, this.mc.player.prevTimeInPortal, this.mc.player.timeInPortal);
+//
+//        if (f > 0.0F && !this.mc.player.isPotionActive(Effects.NAUSEA))
+//        {
+//            this.renderPortal(f);
+//        }
 
         if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR)
         {
@@ -216,9 +231,13 @@
             this.mc.getTextureManager().bindTexture(GUI_ICONS_LOCATION);
             RenderSystem.enableBlend();
             RenderSystem.enableAlphaTest();
-            this.func_238456_d_(matrixStack);
+            //Vivecraft nope
+            //this.func_238456_d_(matrixStack);
             GlStateManager.enableAlphaTest();
-            RenderSystem.defaultBlendFunc();
+            //RenderSystem.defaultBlendFunc();
+            //Vivecraft blend
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+            ///
             this.mc.getProfiler().startSection("bossHealth");
             this.overlayBoss.func_238484_a_(matrixStack);
             this.mc.getProfiler().endSection();
@@ -304,7 +323,9 @@
                     RenderSystem.pushMatrix();
                     RenderSystem.translatef((float)(this.scaledWidth / 2), (float)(this.scaledHeight - 68), 0.0F);
                     RenderSystem.enableBlend();
-                    RenderSystem.defaultBlendFunc();
+                    //Vivecraft blend
+                    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+                    ///
                     int k1 = 16777215;
 
                     if (this.animateOverlayMessageColor)
@@ -347,7 +368,9 @@
                     RenderSystem.pushMatrix();
                     RenderSystem.translatef((float)(this.scaledWidth / 2), (float)(this.scaledHeight / 2), 0.0F);
                     RenderSystem.enableBlend();
-                    RenderSystem.defaultBlendFunc();
+                    //Vivecraft blend
+                    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+                    ///
                     RenderSystem.pushMatrix();
                     RenderSystem.scalef(4.0F, 4.0F, 4.0F);
                     int l1 = j1 << 24 & -16777216;
@@ -394,9 +417,30 @@
             {
                 this.func_238447_a_(matrixStack, scoreobjective1);
             }
+            
+			if (mc.currentScreen != null) {
+				// VIVECRAFT: Dimming effect when in background
+				float brightness = 0.5F;
+				GlStateManager.enableBlend();
+				RenderSystem.blendFuncSeparate(SourceFactor.ZERO, DestFactor.ONE, SourceFactor.ZERO, DestFactor.SRC_ALPHA);
+				GlStateManager.disableTexture();
+				GlStateManager.depthMask(false);
+				Tessellator tessellator = Tessellator.getInstance();
+				BufferBuilder bufferbuilder = tessellator.getBuffer();
+				bufferbuilder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_COLOR);
+				bufferbuilder.pos(0.0D, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(mc.currentScreen.width, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(mc.currentScreen.width, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(0.0D, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				tessellator.draw();
+				GlStateManager.depthMask(true);
+				GlStateManager.enableTexture();
+			}
 
             RenderSystem.enableBlend();
-            RenderSystem.defaultBlendFunc();
+            //Vivecraft blend
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+            ///
             RenderSystem.disableAlphaTest();
             RenderSystem.pushMatrix();
             RenderSystem.translatef(0.0F, (float)(this.scaledHeight - 48), 0.0F);
@@ -406,7 +450,7 @@
             RenderSystem.popMatrix();
             scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
 
-            if (this.mc.gameSettings.keyBindPlayerList.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
+            if ((this.mc.gameSettings.keyBindPlayerList.isKeyDown() || showPlayerList) && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
             {
                 this.overlayPlayerList.setVisible(true);
                 this.overlayPlayerList.func_238523_a_(matrixStack, this.scaledWidth, scoreboard, scoreobjective1);
@@ -626,22 +670,45 @@
             this.blit(matrixStack, i - 91, this.scaledHeight - 22, 0, 0, 182, 22);
             this.blit(matrixStack, i - 91 - 1 + playerentity.inventory.currentItem * 20, this.scaledHeight - 22 - 1, 0, 22, 24, 22);
 
-            if (!itemstack.isEmpty())
+            //Vivecraft - render hotbar context selection.
+            if(mc.interactTracker.hotbar >= 0 && mc.interactTracker.hotbar < 9 && playerentity.inventory.currentItem != mc.interactTracker.hotbar) {
+                RenderSystem.color4f(0.0F, 1.0F, 0.0F, 1.0F);
+                this.blit(matrixStack, i - 91 - 1 + mc.interactTracker.hotbar * 20, this.scaledHeight - 22 - 1, 0, 22, 24, 22);
+                RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+            }
+            //
+            
+            //Vivecraft - touch hotbar offhand-slot-swap
+            if (!itemstack.isEmpty() || mc.vrSettings.vrTouchHotbar)
             {
                 if (handside == HandSide.LEFT)
                 {
-                    this.blit(matrixStack, i - 91 - 29, this.scaledHeight - 23, 24, 22, 29, 24);
+                    if(mc.interactTracker.hotbar == 9 ) {
+                        RenderSystem.color4f(0.0F, 0.0F, 1.0F, 1.0F);
+                        this.blit(matrixStack, i - 91 - 29, this.scaledHeight - 23, 24, 22, 29, 24);
+                        RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+                    } else {
+                        this.blit(matrixStack, i - 91 - 29, this.scaledHeight - 23, 24, 22, 29, 24);
+                    }
                 }
                 else
                 {
-                    this.blit(matrixStack, i + 91, this.scaledHeight - 23, 53, 22, 29, 24);
+                    if(mc.interactTracker.hotbar == 9) {
+                        RenderSystem.color4f(0.0F, 0.0F, 1.0F, 1.0F);
+                        this.blit(matrixStack, i + 91, this.scaledHeight - 23, 53, 22, 29, 24);
+                        RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+                    } else 
+                        this.blit(matrixStack, i + 91, this.scaledHeight - 23, 53, 22, 29, 24);
                 }
             }
-
+            //
+                
             this.setBlitOffset(j);
             RenderSystem.enableRescaleNormal();
             RenderSystem.enableBlend();
-            RenderSystem.defaultBlendFunc();
+            //Vivecraft blend
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+            //
             CustomItems.setRenderOffHand(false);
 
             for (int i1 = 0; i1 < 9; ++i1)
@@ -692,6 +759,10 @@
 
             RenderSystem.disableRescaleNormal();
             RenderSystem.disableBlend();
+
+            //Vivecraft
+            renderViveHudIcons(matrixStack);
+            //
         }
     }
 
@@ -1231,8 +1302,10 @@
         }
     }
 
+    //unused
     private void renderPumpkinOverlay()
     {
+    	if(true)return; //Forge can call this.
         RenderSystem.disableDepthTest();
         RenderSystem.depthMask(false);
         RenderSystem.defaultBlendFunc();
@@ -1262,6 +1335,8 @@
         }
     }
 
+    
+    //unused
     private void renderVignette(Entity entityIn)
     {
         if (!Config.isVignetteEnabled())
@@ -1314,6 +1389,7 @@
         }
     }
 
+    //unused
     private void renderPortal(float timeInPortal)
     {
         if (timeInPortal < 1.0F)
@@ -1561,4 +1637,79 @@
     {
         this.overlayDebug.resetChunk();
     }
+    
+	//VIVECRAFT ADDITIONS ***********************************
+  	
+  	private void renderViveHudIcons(MatrixStack matrixstack){
+          //VIVE SPRINTDICATOR
+          if (this.mc.getRenderViewEntity() instanceof PlayerEntity)
+          {
+        	  int i = mc.getMainWindow().getScaledWidth();
+        	  int j = mc.getMainWindow().getScaledHeight();
+        	  FontRenderer fontrenderer = mc.ingameGUI.getFontRenderer();
+        	  PlayerEntity entityplayer = (PlayerEntity)this.mc.getRenderViewEntity();
+        	  int iconp = 0;    	  
+        	
+        	  Effect e = null;
+        	  if(entityplayer.isSprinting()) e = Effects.SPEED;      
+        	  if(entityplayer.isActualySwimming()) e = Effects.DOLPHINS_GRACE;
+        	  if(entityplayer.isSneaking()) e = Effects.BLINDNESS;
+        	  if(entityplayer.isElytraFlying()) iconp = -1;
+        	  if(mc.crawlTracker.crawling) iconp = -2;
+        	  
+    		  int w = this.mc.getMainWindow().getScaledWidth() / 2 - 109;
+    		  int h = this.mc.getMainWindow().getScaledHeight() -39;	 
+
+        	  if(iconp == -1){
+        		  mc.getItemRenderer().renderItemIntoGUI(new ItemStack(Items.ELYTRA), w, h);
+        		  e = null;
+        	  } 
+        	  else if(iconp == -2){
+        		  if(entityplayer.isSneaking())
+        			  w -= 19;
+        		  else
+        			  e = null;
+        		  mc.getItemRenderer().renderItemIntoGUI(new ItemStack(Items.RABBIT_FOOT), w, h);
+        	  } 
+        	  
+        	  if (e!=null) {  		   
+        	      TextureAtlasSprite sprite = mc.getPotionSpriteUploader().getSprite(e);
+            	  GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+        		  this.mc.getTextureManager().bindTexture(sprite.getAtlasTexture().getTextureLocation());
+        		  AbstractGui.blit(matrixstack, w, h, 0, 18, 18, sprite);        			
+        	  }       	  
+          }
+          //
+  	}
+
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{	
+		RenderSystem.enableBlend();
+		RenderSystem.enableAlphaTest();
+		RenderSystem.disableDepthTest();
+		RenderSystem.disableLighting();
+		RenderSystem.color4f(1, 1, 1, 1);
+
+		this.mc.getTextureManager().bindTexture(GUI_ICONS_LOCATION);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		
+		// Turns out all we needed was some blendFuncSeparate magic :)
+		// Also color DestFactor of ZERO produces better results with non-white crosshairs
+		RenderSystem.blendFuncSeparate(SourceFactor.ONE_MINUS_DST_COLOR, DestFactor.ZERO, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+	}
+	
+	public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+	{   	
+		float f = 1f/256;
+		float f1 = 1f/256;
+		BufferBuilder bufferbuilder = Tessellator.getInstance().getBuffer();
+		bufferbuilder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX);
+		bufferbuilder.pos((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.getBlitOffset()).tex(((float)(u + 0) * f), ((float)(v + texHeight) * f1)).endVertex();
+		bufferbuilder.pos((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.getBlitOffset()).tex( ((float)(u + texWidth) * f), ((float)(v + texHeight) * f1)).endVertex();
+		bufferbuilder.pos((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.getBlitOffset()).tex( ((float)(u + texWidth) * f), ((float)(v + 0) * f1)).endVertex();
+		bufferbuilder.pos((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.getBlitOffset()).tex( ((float)(u + 0) * f), ((float)(v + 0) * f1)).endVertex();
+	    bufferbuilder.finishDrawing();
+	    WorldVertexBufferUploader.draw(bufferbuilder);
+	}
 }
